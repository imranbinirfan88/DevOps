Complete Git and GitHub Commands Cheat Sheet
Option 1: Delete Remote Branch Using Git Bash

git push origin --delete branch-name
Example (delete master branch):


git push origin --delete master
Basic Git Commands
Configuration

git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
git config --global core.editor "code --wait"  # Set VS Code as editor
git config --list  # View all configurations
Repository Setup
bash
git init  # Initialize new local repository
git clone <url>  # Clone remote repository
git clone <url> <directory_name>  # Clone into specific directory
Basic Workflow

git status  # Check status of working directory
git add <file>  # Add file to staging area
git add .  # Add all changed files to staging
git add -A  # Add all files (including deleted)
git add -u  # Add updated files only
git commit -m "Commit message"  # Commit staged changes
git commit -a -m "Commit message"  # Add and commit all tracked files
git rm <file>  # Remove file from working directory and staging area
git rm --cached <file>  # Remove file from staging area only
git mv <old> <new>  # Rename or move file
Branching
bash
git branch  # List all local branches
git branch -a  # List all branches (local and remote)
git branch <branch_name>  # Create new branch
git checkout <branch_name>  # Switch to branch
git checkout -b <branch_name>  # Create and switch to new branch
git branch -d <branch_name>  # Delete local branch
git branch -D <branch_name>  # Force delete local branch
git merge <branch_name>  # Merge branch into current branch
git merge --abort  # Abort a merge with conflicts
git rebase <branch>  # Rebase current branch onto another branch
git rebase --abort  # Abort a rebase
Remote Repositories

git remote -v  # List remote repositories
git remote add <name> <url>  # Add new remote repository
git remote remove <name>  # Remove remote
git remote rename <old> <new>  # Rename remote
git fetch <remote>  # Download objects from remote
git fetch --all  # Fetch from all remotes
git pull <remote> <branch>  # Fetch and merge remote changes
git pull --rebase  # Pull with rebase instead of merge
git push <remote> <branch>  # Push local commits to remote
git push -u <remote> <branch>  # Push and set upstream
git push --force  # Force push (use with caution)
git push --tags  # Push all tags
History and Logs

git log  # Show commit logs
git log --oneline  # Compact log view
git log --graph --oneline --decorate --all  # Fancy graph view
git log -p <file>  # Show change history for file
git log --stat  # Show stats with log
git log --author="name"  # Filter by author
git log --since="1 week ago"  # Filter by time
git log -n 5  # Show last 5 commits
git show <commit>  # Show changes in a commit
git blame <file>  # Show who changed each line
git diff  # Show unstaged changes
git diff --staged  # Show staged changes
git diff <commit1> <commit2>  # Diff between two commits
git diff <branch1>..<branch2>  # Diff between branches
Undoing Changes
bash
git checkout -- <file>  # Discard changes in working directory
git reset HEAD <file>  # Unstage file
git reset --soft <commit>  # Move HEAD to commit, keep changes staged
git reset --mixed <commit>  # Move HEAD, keep changes unstaged (default)
git reset --hard <commit>  # Move HEAD and discard all changes
git revert <commit>  # Create new commit that undoes a previous commit
git clean -fd  # Remove untracked files/directories
Stashing
bash
git stash  # Stash changes
git stash save "message"  # Stash with message
git stash list  # List all stashes
git stash apply  # Apply last stash
git stash apply stash@{n}  # Apply specific stash
git stash pop  # Apply and remove last stash
git stash drop stash@{n}  # Delete specific stash
git stash clear  # Delete all stashes
git stash show -p  # Show stash changes
Tags
bash
git tag  # List all tags
git tag <tagname>  # Create lightweight tag
git tag -a <tagname> -m "message"  # Create annotated tag
git tag -d <tagname>  # Delete local tag
git push origin --tags  # Push all tags to remote
git push origin :refs/tags/<tagname>  # Delete remote tag
git checkout <tagname>  # Checkout tag
Submodules
bash
git submodule add <url> <path>  # Add submodule
git submodule update --init --recursive  # Initialize and update submodules
git submodule foreach 'git pull'  # Pull all submodules
GitHub Specific Commands
GitHub CLI (gh)
bash
gh auth login  # Authenticate with GitHub
gh repo create  # Create new repository
gh repo clone <owner>/<repo>  # Clone repository
gh pr create  # Create pull request
gh pr list  # List pull requests
gh pr checkout <number>  # Checkout PR branch
gh issue create  # Create issue
gh issue list  # List issues
gh release create  # Create release
Forking Workflow
bash
git remote add upstream <original_repo_url>  # Add original repo as upstream
git fetch upstream  # Fetch changes from upstream
git merge upstream/main  # Merge upstream changes into your fork
Pull Requests
bash
# After pushing your branch to your fork
gh pr create --fill  # Create PR with filled details
gh pr view --web  # View PR in browser
gh pr merge  # Merge PR
GitHub Pages
bash
# Create gh-pages branch for project site
git checkout --orphan gh-pages
git rm -rf .
touch index.html
git add index.html
git commit -m "Initial pages commit"
git push origin gh-pages
Advanced Git Commands
Bisect
bash
git bisect start  # Start bisect session
git bisect bad  # Mark current commit as bad
git bisect good <commit>  # Mark known good commit
git bisect reset  # End bisect session
Worktree
bash
git worktree add ../new_directory branch_name  # Add new worktree
git worktree list  # List worktrees
git worktree remove ../directory  # Remove worktree
Cherry-pick
bash
git cherry-pick <commit>  # Apply specific commit to current branch
git cherry-pick -x <commit>  # Cherry-pick with reference to original commit
git cherry-pick --abort  # Abort cherry-pick
Reflog
bash
git reflog  # Show reference logs
git reflog show <branch>  # Show reflog for specific branch
Patch
bash
git format-patch <commit>  # Create patch file from commit
git apply <patch_file>  # Apply patch
git am <patch_file>  # Apply patch and commit
Hooks
bash
# All hooks are in .git/hooks/ directory
chmod +x .git/hooks/pre-commit  # Make hook executable
Large File Storage (LFS)
bash
git lfs install  # Install LFS
git lfs track "*.psd"  # Track large files
git lfs ls-files  # List tracked files

